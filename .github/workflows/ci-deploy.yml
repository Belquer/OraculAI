name: CI / Build and Publish

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/oraculai:staging
          file: ./Dockerfile

  build-and-publish-image:
    name: Build and publish GHCR image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push latest image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/oraculai:latest
          file: ./Dockerfile

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Deploy to Render (manual step)
        run: echo "Add your deployment step here or configure Render to auto-deploy from the staging branch"

  deploy-render:
    name: Deploy to Render
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        run: |
          if [ -z "${{ secrets.RENDER_API_KEY }}" ] || [ -z "${{ secrets.RENDER_SERVICE_ID }}" ]; then
            echo "Render secrets not found. Skipping deploy."
            exit 0
          fi
          set -euo pipefail
          echo "Triggering Render deploy for service ${{ secrets.RENDER_SERVICE_ID }}"
          # Request a new deploy
          resp=$(curl -s -X POST 
            -H "Accept: application/json" 
            -H "Content-Type: application/json" 
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" 
            -d '{"serviceId":"${{ secrets.RENDER_SERVICE_ID }}"}' 
            https://api.render.com/deploys)
          echo "Render deploy response: $resp"
          # Try to fetch service details (domain) for convenience
          svc=$(curl -s -X GET 
            -H "Accept: application/json" 
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" 
            https://api.render.com/services/${{ secrets.RENDER_SERVICE_ID }} || true)
          echo "Render service info: $svc"
